<?php
    error_reporting(E_ALL|E_STRICT);
/*
 * Setup the autoloader
 */
    set_include_path(
        implode(PATH_SEPARATOR, array(
            implode(DIRECTORY_SEPARATOR, array(__DIR__, 'class')),
            implode(DIRECTORY_SEPARATOR, array(__DIR__, 'class/support')),
            implode(DIRECTORY_SEPARATOR, array(__DIR__, 'lib')),
            get_include_path()
        ))
    );
    spl_autoload_extensions('.php');
    spl_autoload_register();
/*
 * Initialise template engine - check to see if it is installed!!
 */
    if (!(@include 'Twig/Autoloader.php'))
    {
        include 'errors/notwig.php';
        exit;
    }
    Twig_Autoloader::register();
    $twig = new Twig_Environment(
        new Twig_Loader_Filesystem('./install/twigs'),
        array('cache' => FALSE, 'debug' => TRUE)
    );
    $twig->addExtension(new Twig_Extension_Debug());

/**
 * Find out where we are
 */
    $dn = preg_replace('#\\\\#', '/', __DIR__); # windows installers have \ in the name
    $bdr = array();
    $sdir = preg_replace('#/+$#', '', $_SERVER['DOCUMENT_ROOT']); # remove any trailing / characters
    while ($dn != $sdir)
    {
        $pp = pathinfo($dn);
        $dn = $pp['dirname'];
        array_unshift($bdr, $pp['basename']);
    }
    if (empty($bdr))
    {
        $dir = '';
        $name = 'newproject';
    }
    else
    {
        $dir = '/'.implode('/', $bdr);
        $name = end($bdr); # don't use $bdr again so no need to        reset() it...
    }

    $tpl = 'install.twig';
    $vals = array('name' => $name, 'dir' => __DIR__);

    $fail = FALSE;
    $fd = @fopen('.test', 'w');
    if ($fd === FALSE)
    {
        $fail = $vals['nodotgw'] = TRUE;
    }
    else
    {
        fclose($fd);
        unlink('.test');
    }

    $fd = @fopen('class/.test', 'w');
    if ($fd === FALSE)
    {
        $fail = $vals['noclassgw'] = TRUE;
    }
    else
    {
        fclose($fd);
        unlink('class/.test');
    }

    $hasconfig = file_exists('class/config.php');
    $hashtaccess  = file_exists('.htaccess');
    $vals['hasconfig'] = $hasconfig;
    $vals['hashtaccess'] =  $hashtaccess;
    if (!$fail && filter_has_var(INPUT_POST, 'sitename'))
    { # this is an installation attempt
        $cvars = array(
            'dbhost'        => 'DBHOST',
            'dbname'        => 'DB',
            'dbuser'        => 'DBUSER',
            'dbpass'        => 'DBPW',
            'sitename'      => 'SITENAME',
            'siteurl'       => 'SITEURL',
            'sitenoreply'   => 'SITENOREPLY',
            'email'         => 'SYSADMIN',
            'admin'         => '',
            'adminpw'       => '',
            'cadminpw'      => ''
        );

        $cvalue = array();
        foreach (array_keys($cvars) as $v)
        {
            if (filter_has_var(INPUT_POST, $v))
            {
                $cvalue[$v] = trim($_POST[$v]);
            }
            else
            {
                header('HTTP/1.1 400 Bad Request');
                exit;
            }
        }

/*
 * Setup the config.php file in the lib directory
 */
        if (!$hasconfig || $context->postpar('forceconf', 0) == 1)
        {
            $fd = fopen('class/config.php', 'w');
            if ($fd === FALSE)
            {
                header('HTTP/1.1 500 Internal Error');
                exit;
            }
            fputs($fd, "<?php\n");
            fputs($fd, "/**\n * Generated by framework installer - ".date('r')."\n */\n    class Config\n    {\n");
            fputs($fd, "\tconst BASEDNAME\t= '".$dir."';\n");
            foreach ($cvars as $fld => $name)
            {
                if ($name != '')
                { # Only save relevant values - see above
                    fputs($fd, "\tconst ".$name."\t= '".$cvalue[$fld]."';\n");
                }
            }
            fputs($fd,"    }\n?>");
            fclose($fd);
        }
/*
 * Setup the .htaccess file
 */
        if (!$hashtaccess || $context->postpar('forcehtaccess', 0) == 1)
        {
            $fd = fopen('.htaccess', 'w');
            if ($fd === FALSE)
            {
                header('HTTP/1.1 500 Internal Error');
                exit;
            }
            fputs($fd, "RewriteEngine on\nOptions +FollowSymlinks\n");
            fputs($fd, 'RewriteBase '.$dir."\n");
            fputs($fd, "RewriteRule ^(ajax.*) $1 [L,NC,QSA]\nRewriteRule ^(assets)/(.*) $1/$2 [L,NC]\n".
                "RewriteRule ^.*$ index.php [L,QSA]\n");
            fclose($fd);
        }
/*
 * Try opening the database and setting up the User table
 */
        require('rb.php');
        try
        {
            $vals['dbhost'] = $cvalue['dbhost'];
            $vals['dbname'] = $cvalue['dbname'];
            $vals['dbuser'] = $cvalue['dbuser'];
            R::setup('mysql:host='.$cvalue['dbhost'].';dbname='.$cvalue['dbname'], $cvalue['dbuser'], $cvalue['dbpass']); # mysql initialiser
            R::freeze(FALSE);
            R::nuke(); # clear everything.....
            $user = R::dispense('user');
            $user->email = $cvalue['email'];
            $user->login = $cvalue['admin'];
            $user->password = password_hash($cvalue['adminpw'], PASSWORD_DEFAULT);
            $user->active = 1;
            $user->confirm = 1;
            $user->joined = R::isodatetime();
            R::store($user);

            $pages = array(
                'about'     => array(SiteAction::TEMPLATE, 'about.twig', 0, 0),
                'admin'     => array(SiteAction::OBJECT, 'Admin', 1, 1),
                'confirm'   => array(SiteAction::OBJECT, 'UserLogin', 0, 0),
                'contact'   => array(SiteAction::OBJECT, 'Contact', 0, 0),
                'forgot'    => array(SiteAction::OBJECT, 'UserLogin', 0, 0),
                'home'      => array(SiteAction::TEMPLATE, 'index.twig', 0, 0),
                'login'     => array(SiteAction::OBJECT, 'UserLogin', 0, 0),
                'logout'    => array(SiteAction::OBJECT, 'UserLogin', 0, 0),
                'register'  => array(SiteAction::OBJECT, 'UserLogin', 0, 0),
            );
            foreach ($pages as $name => $data)
            {
                $p = R::dispense('page');
                $p->name = $name;
                $p->kind = $data[0];
                $p->source = $data[1];
                $p->admin = $data[2];
                $p->needlogin = $data[3];
                $p->active = 1;
                $p->devel = 0;
                R::store($p);
            }
/**
 * Set up some roles for access control:
 *
 * Admin for the Site
 * Developer for the Site
 *
 * These are both granted to the admin user.
 */
            $cname = R::dispense('rolecontext');
            $cname->name = 'Site';
            R::store($cname);

            $rname = R::dispense('rolename');
            $rname->name = 'Admin';
            R::store($rname);

            $role = R::dispense('role');
            $role->otherinfo = '-';
            $role->start = R::isodatetime();
            $role->end =   R::isodatetime(); # this makes RedBean make it a datetime field
            R::store($role);
            $role->end = NULL; # clear end date as we don't want to time limit admin
            R::store($role);
            $user->xownRole[] = $role;
            $cname->xownRole[] = $role;
            $rname->xownRole[] = $role;
            R::store($rname);

            $rname = R::dispense('rolename');
            $rname->name = 'Developer';
            R::store($rname);

            $role = R::dispense('role');
            $role->otherinfo = '-';
            $role->start = R::isodatetime();
            $role->end = NULL; # no end date
            R::store($role);
            $user->xownRole[] = $role;
            $cname->xownRole[] = $role;
            $rname->xownRole[] = $role;
            R::store($user);
            R::store($cname);
            R::store($rname);
            $tpl = 'success.twig';
        }
        catch (Exception $e)
        { # something went wrong - so try again...
            $vals['dberror'] = $e->getMessage();
        }
    }
    echo $twig->render($tpl, $vals);
?>
